// <auto-generated />
using System;
using System.Collections.Generic;
using ContentManager.Api.Contracts.Domain.Enum;
using ContentManager.Api.Persistence.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ContentManager.Api.Persistence.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240928194935_AddedQualityLevels")]
    partial class AddedQualityLevels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "content_type", new[] { "picture", "gif", "video", "music" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.Content", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<ContentType>("ContentType")
                        .HasColumnType("content_type")
                        .HasColumnName("content_type");

                    b.Property<string>("LocalFilePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("local_file_path");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<int>("PostOrder")
                        .HasColumnType("integer")
                        .HasColumnName("post_order");

                    b.Property<int>("PostVariant")
                        .HasColumnType("integer")
                        .HasColumnName("post_variant");

                    b.Property<Dictionary<string, string>>("QualityLevels")
                        .HasColumnType("jsonb")
                        .HasColumnName("quality_levels");

                    b.HasKey("Id")
                        .HasName("pk_contents");

                    b.HasIndex("PostId", "PostOrder", "PostVariant")
                        .IsUnique()
                        .HasDatabaseName("ix_contents_post_id_post_order_post_variant");

                    b.ToTable("contents", (string)null);
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.ContentCollection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description");

                    b.Property<string>("EditorGroupName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("editor_group_name");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("is_draft");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerGroupName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("owner_group_name");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("owner_user_id");

                    b.Property<string>("ReaderGroupName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("reader_group_name");

                    b.HasKey("Id")
                        .HasName("pk_content_collections");

                    b.ToTable("content_collections", (string)null);
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.ContentPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("CanUsersEditTags")
                        .HasColumnType("boolean")
                        .HasColumnName("can_users_edit_tags");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description");

                    b.Property<string>("EditorGroupName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("editor_group_name");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("is_draft");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("OwnerGroupName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("owner_group_name");

                    b.Property<string>("OwnerUserId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("character varying(36)")
                        .HasColumnName("owner_user_id");

                    b.Property<string>("ReaderGroupName")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("reader_group_name");

                    b.HasKey("Id")
                        .HasName("pk_content_posts");

                    b.ToTable("content_posts", (string)null);
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.ContentPostCollection", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uuid")
                        .HasColumnName("post_id");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("uuid")
                        .HasColumnName("collection_id");

                    b.Property<int>("CollectionOrder")
                        .HasColumnType("integer")
                        .HasColumnName("collection_order");

                    b.HasKey("PostId", "CollectionId")
                        .HasName("pk_content_posts_collections");

                    b.HasIndex("CollectionId")
                        .HasDatabaseName("ix_content_posts_collections_collection_id");

                    b.ToTable("content_posts_collections", (string)null);
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("description");

                    b.Property<string>("ParentName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("parent_name");

                    b.HasKey("Name")
                        .HasName("pk_tags");

                    b.HasIndex("ParentName")
                        .HasDatabaseName("ix_tags_parent_name");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("ContentPostTag", b =>
                {
                    b.Property<Guid>("ContentPostsId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_posts_id");

                    b.Property<string>("TagsName")
                        .HasColumnType("character varying(128)")
                        .HasColumnName("tags_name");

                    b.HasKey("ContentPostsId", "TagsName")
                        .HasName("pk_content_post_tag");

                    b.HasIndex("TagsName")
                        .HasDatabaseName("ix_content_post_tag_tags_name");

                    b.ToTable("content_post_tag", (string)null);
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.Content", b =>
                {
                    b.HasOne("ContentManager.Api.Contracts.Domain.Data.Models.ContentPost", "ContentPost")
                        .WithMany("Attachments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contents_content_posts_post_id");

                    b.Navigation("ContentPost");
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.ContentPostCollection", b =>
                {
                    b.HasOne("ContentManager.Api.Contracts.Domain.Data.Models.ContentCollection", "Collection")
                        .WithMany("ContentPostCollections")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_posts_collections_content_collections_collection_id");

                    b.HasOne("ContentManager.Api.Contracts.Domain.Data.Models.ContentPost", "Post")
                        .WithMany("ContentPostCollections")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_posts_collections_content_posts_post_id");

                    b.Navigation("Collection");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.Tag", b =>
                {
                    b.HasOne("ContentManager.Api.Contracts.Domain.Data.Models.Tag", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentName")
                        .HasConstraintName("fk_tags_tags_parent_name");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ContentPostTag", b =>
                {
                    b.HasOne("ContentManager.Api.Contracts.Domain.Data.Models.ContentPost", null)
                        .WithMany()
                        .HasForeignKey("ContentPostsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_post_tag_content_posts_content_posts_id");

                    b.HasOne("ContentManager.Api.Contracts.Domain.Data.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_post_tag_tags_tags_name");
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.ContentCollection", b =>
                {
                    b.Navigation("ContentPostCollections");
                });

            modelBuilder.Entity("ContentManager.Api.Contracts.Domain.Data.Models.ContentPost", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("ContentPostCollections");
                });
#pragma warning restore 612, 618
        }
    }
}
